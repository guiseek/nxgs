import { Observer } from './observer';
import { Subject } from './subject';

/**
 * <%= concreteSubject %>
 */
export class <%= className %>Subject implements Subject {
  /**
   * @type {number} <%- concreteSubjectState %>
   */
  state: number;

  /**
   * @type {Observer[]} <%= concreteSubjectObservers %>
   */
  #observers: Observer[] = [];

  /**
   * <%= concreteSubjectSubscribe %>
   */
  subscribe(observer: Observer) {
    const isExist = this.#observers.includes(observer);
    if (isExist) {
      return console.log('Subject: Observer has been attached already.');
    }

    console.log('Subject: Attached an observer.');
    this.#observers.push(observer);
  }

  unsubscribe(observer: Observer) {
    const observerIndex = this.#observers.indexOf(observer);
    if (observerIndex === -1) {
      return console.log('Subject: Nonexistent observer.');
    }

    this.#observers.splice(observerIndex, 1);
    console.log('Subject: Detached an observer.');
  }

  /**
   * <%= concreteSubjectNotify %>
   */
  notify() {
    console.log('Subject: Notifying observers...');
    for (const observer of this.#observers) {
      observer.update(this);
    }
  }

  /**
   * <%= concreteSubjectSomeBusinessLogic %>
   */
  someBusinessLogic() {
    console.log("\nSubject: I'm doing something important.");
    this.state = Math.floor(Math.random() * (10 + 1));

    console.log(`Subject: My state has just changed to: ${this.state}`);
    this.notify();
  }
}