/**
 * The <%= className %> class defines the `getInstance` method that lets clients access
 * the unique singleton instance.
 */
export class <%= className %> {
  static #instance: <%= className %>;

  /**
   * The <%= className %>'s constructor should always be private to prevent direct
   * construction calls with the `new` operator.
   */
  private constructor() {}

  /**
   * The static method that controls the access to the singleton instance.
   *
   * This implementation let you subclass the <%= className %> class while keeping
   * just one instance of each subclass around.
   */
  static getInstance() {
    if (!<%= className %>.#instance) {
      <%= className %>.#instance = new <%= className %>();
    }

    return <%= className %>.#instance;
  }

  /**
   * Finally, any singleton should define some business logic, which can be
   * executed on its instance.
   */
  someBusinessLogic() {
    // ...
  }
}
